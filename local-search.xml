<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker学习记录</title>
    <link href="/2024/12/04/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/12/04/docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习记录"><a href="#Docker学习记录" class="headerlink" title="Docker学习记录"></a>Docker学习记录</h1><blockquote><p>Author: Punny</p><p>Date: 2024&#x2F;11&#x2F;16</p></blockquote><blockquote><p>参考文档：<a href="https://yeasy.gitbook.io/docker_practice">https://yeasy.gitbook.io/docker_practice</a></p></blockquote><ul><li>使用yum安装Docker</li></ul><p>我的虚拟机中装的是CentOS注意一些要求：</p><blockquote><p>Docker 支持 64 位版本 CentOS 7&#x2F;8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p></blockquote><ul><li>卸载旧版</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br></code></pre></td></tr></table></figure><ul><li>安装依赖包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y yum-utils<br></code></pre></td></tr></table></figure><p>报错了，可能是镜像源的问题,没报错的可以直接忽略这一步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">已加载插件：fastestmirror, langpacks<br>Loading mirror speeds from cached hostfile<br>Could not retrieve mirrorlist http://mirrorlist.centos.org/?release=7&amp;<span class="hljs-built_in">arch</span>=x86_64&amp;repo=os&amp;infra=stock error was<br>14: curl#6 - <span class="hljs-string">&quot;Could not resolve host: mirrorlist.centos.org; 未知的错误&quot;</span><br><br><br> One of the configured repositories failed (未知),<br> and yum doesn<span class="hljs-string">&#x27;t have enough cached data to continue. At this point the only</span><br><span class="hljs-string"> safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:</span><br><span class="hljs-string"></span><br><span class="hljs-string">     1. Contact the upstream for the repository and get them to fix the problem.</span><br><span class="hljs-string"></span><br><span class="hljs-string">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span><br><span class="hljs-string">        upstream. This is most often useful if you are using a newer</span><br><span class="hljs-string">        distribution release than is supported by the repository (and the</span><br><span class="hljs-string">        packages for the previous distribution release still work).</span><br><span class="hljs-string"></span><br><span class="hljs-string">     3. Run the command with the repository temporarily disabled</span><br><span class="hljs-string">            yum --disablerepo=&lt;repoid&gt; ...</span><br><span class="hljs-string"></span><br><span class="hljs-string">     4. Disable the repository permanently, so yum won&#x27;</span>t use it by default. Yum<br>        will <span class="hljs-keyword">then</span> just ignore the repository <span class="hljs-keyword">until</span> you permanently <span class="hljs-built_in">enable</span> it<br>        again or use --enablerepo <span class="hljs-keyword">for</span> temporary usage:<br><br>            yum-config-manager --<span class="hljs-built_in">disable</span> &lt;repoid&gt;<br>        or<br>            subscription-manager repos --<span class="hljs-built_in">disable</span>=&lt;repoid&gt;<br><br>     5. Configure the failing repository to be skipped, <span class="hljs-keyword">if</span> it is unavailable.<br>        Note that yum will try to contact the repo. when it runs most commands,<br>        so will have to try and fail each time (and thus. yum will be be much<br>        slower). If it is a very temporary problem though, this is often a <span class="hljs-built_in">nice</span><br>        compromise:<br><br>            yum-config-manager --save --<span class="hljs-built_in">setopt</span>=&lt;repoid&gt;.skip_if_unavailable=<span class="hljs-literal">true</span><br><br>Cannot find a valid baseurl <span class="hljs-keyword">for</span> repo: base/7/x86_64<br><br></code></pre></td></tr></table></figure><p>配置阿里云yum源</p><p>去到yum的仓库源目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/yum.repos.d<br></code></pre></td></tr></table></figure><p>利用wget下载阿里云镜像源配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></td></tr></table></figure><p>备份原来的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> CentOS-Base.repo CentOS-Base.repo.bak<br></code></pre></td></tr></table></figure><p>用刚才下载的替换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> Centos-7.repo CentOS-Base.repo<br></code></pre></td></tr></table></figure><p>清除缓存更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum clean all<br>yum makecache<br>yum update<br></code></pre></td></tr></table></figure><p>完成后再次安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install -y yum-utils<br></code></pre></td></tr></table></figure><ul><li>切换docker的yum镜像源为阿里云仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><br><span class="hljs-built_in">sudo</span> sed -i <span class="hljs-string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br></code></pre></td></tr></table></figure><ul><li>正式安装docker</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><ul><li>执行docker version验证是否安装完成</li></ul><blockquote><p>Client: Docker Engine - Community<br>Version:           26.1.4<br>API version:       1.45<br>Go version:        go1.21.11<br>Git commit:        5650f9b<br>Built:             Wed Jun  5 11:32:04 2024<br>OS&#x2F;Arch:           linux&#x2F;amd64<br>Context:           default<br>Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?</p></blockquote><p>显示docker版本信息，表示安装成功！</p><ul><li>启动docker</li></ul><blockquote><p>Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?表示docker未启动</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-built_in">sudo</span> systemctl start docker<br></code></pre></td></tr></table></figure><p>再次运行docker version即可看见更详细的内容</p><blockquote><p>Client: Docker Engine - Community<br>Version:           26.1.4<br>API version:       1.45<br>Go version:        go1.21.11<br>Git commit:        5650f9b<br>Built:             Wed Jun  5 11:32:04 2024<br>OS&#x2F;Arch:           linux&#x2F;amd64<br>Context:           default</p><p>Server: Docker Engine - Community<br>Engine:<br>Version:          26.1.4<br>API version:      1.45 (minimum version 1.24)<br>Go version:       go1.21.11<br>Git commit:       de5c9cf<br>Built:            Wed Jun  5 11:31:02 2024<br>OS&#x2F;Arch:          linux&#x2F;amd64<br>Experimental:     false<br>containerd:<br>Version:          1.6.33<br>GitCommit:        d2d58213f83a351ca8f528a95fbd145f5654e957<br>runc:<br>Version:          1.1.12<br>GitCommit:        v1.1.12-0-g51d5e94<br>docker-init:<br>Version:          0.19.0<br>GitCommit:        de40ad0</p></blockquote><ul><li>测试运行是否正常，使用hello world镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> hello-world<br></code></pre></td></tr></table></figure><p>报错了（没报错可以跳过）</p><blockquote><p>Unable to find image ‘hello-world:latest’ locally<br>docker: Error response from daemon: Get “<a href="https://registry-1.docker.io/v2/">https://registry-1.docker.io/v2/</a>“: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).<br>See ‘docker run –help’.</p></blockquote><p>原因是docker的镜像源默认是国外，最近应该是被墙了，国内很多也下架了</p><p>需要切换成国内有效的镜像源参考网站：<a href="https://status.1panel.top/status/docker">https://status.1panel.top/status/docker</a></p><p>配置后可以执行docker pull 但是docker search还是不行，可以去下面的网站找docker镜像：<a href="https://docker.fxxk.dedyn.io/">https://docker.fxxk.dedyn.io/</a></p><p>新增配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vi /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><p>编辑内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.1panel.live&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://hub.rat.dev&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://hub.xdark.top&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://hub.littlediary.cn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://dockerpull.org&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://hub.crdz.gq&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.unsee.tech&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://registry.dockermirror.com&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.m.daocloud.io&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.ketches.cn&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-string">&quot;https://docker.1ms.run&quot;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>esc退出编辑模式:wq!保存</p><p>重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> service docker restart<br></code></pre></td></tr></table></figure><p>再次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --<span class="hljs-built_in">rm</span> hello-world<br></code></pre></td></tr></table></figure><p>成功运行</p><blockquote><p>Hello from Docker!<br>This message shows that your installation appears to be working correctly.</p><p>To generate this message, Docker took the following steps:</p><ol><li>The Docker client contacted the Docker daemon.</li><li>The Docker daemon pulled the “hello-world” image from the Docker Hub.<br>(amd64)</li><li>The Docker daemon created a new container from that image which runs the<br>executable that produces the output you are currently reading.</li><li>The Docker daemon streamed that output to the Docker client, which sent it<br>to your terminal.</li></ol><p>To try something more ambitious, you can run an Ubuntu container with:<br> $ docker run -it ubuntu bash</p><p>Share images, automate workflows, and more with a free Docker ID:<br> <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>For more examples and ideas, visit:<br> <a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p></blockquote><ul><li>docker的命令</li></ul><p>docker search 搜索镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search mysql<br></code></pre></td></tr></table></figure><p>docker pull 拉取镜像</p><p>也可以通过指定镜像的tag来拉取指定版本的镜像</p><p>没有指定tag默认为:latest</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mysql <span class="hljs-comment">#默认拉取最新版mysql:latest</span><br>docker pull mysql:5.7 <span class="hljs-comment">#通过tag指定版本</span><br></code></pre></td></tr></table></figure><p>docker images 查看镜像列表</p><blockquote><p>REPOSITORY    TAG       IMAGE ID              CREATED                SIZE<br>mysql                latest    10db11fef9ce       4 weeks ago          602MB<br>mysql                5.7         5107333e08a8    11 months ago     501MB<br>hello-world       latest    d2c94e258dcb    18 months ago    13.3kB</p></blockquote><p>可以查看镜像源、版本、镜像id、创建时间、和大小等信息</p><p>docker rmi 删除镜像</p><p>可以通过镜像名称、或者镜像id来删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi mysql <span class="hljs-comment">#只删除mysql:latest</span><br>docker rmi mysql:5.7<br>docker rmi d2c94e258dcb <span class="hljs-comment">#根据镜像id删除</span><br></code></pre></td></tr></table></figure><p>docker run</p><blockquote><p>docker run命令用于指定一个镜像模板，并以此创建并启动一个容器</p><p>有很多参数来设置容器的一些配置</p></blockquote><p>docker run [可选参数] 镜像名&#x2F;镜像id</p><table><thead><tr><th>参数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>–name</td><td>为容器指定一个名称，便于管理。</td><td>docker run –name my-container ubuntu</td></tr><tr><td>-d</td><td>以 <strong>后台模式</strong> 运行容器。类似nohop</td><td>docker run -d nginx</td></tr><tr><td>-it</td><td>允许用户以交互模式运行容器，并附加到容器的终端（常用于调试）。<br />运行容器后会直接进入容器内部，可以通过exit命令退出容器并停止容器，Ctrl + P + Q可以退出容器但是不停容器</td><td>docker run -it ubuntu &#x2F;bin&#x2F;bash</td></tr><tr><td>–rm</td><td>在容器停止后自动删除容器。</td><td>docker run –rm ubuntu</td></tr><tr><td>-p</td><td>映射主机和容器的端口，用于访问容器内的服务。-p 主机端口:容器端口。也可以直接指定容器端口-p 容器端口</td><td>docker run -p 8080:80 nginx</td></tr><tr><td>-P</td><td>自动随机映射主机的可用端口到容器的暴露端口。</td><td>docker run -P nginx</td></tr></tbody></table><p>docker ps 列出正在运行的容器信息</p><p>docker ps -a 列出当前所有的容器的信息</p><p>docker rm 删除容器</p><p>docker start&#x2F;restart 启动&#x2F;重启一个已经存在的容器</p><p>docker stop 停止容器</p><p>docker kill 强制停止容器</p><p>docker stats 查看容器运行情况</p><ul><li>为什么使用docker run -d centos启动容器后，容器后马上停止</li></ul><blockquote><p>涉及到容器的生命周期和其关联的主进程相关的内容，后续再在这里探讨—2024&#x2F;11&#x2F;17</p></blockquote><ul><li>docker logs 查看容器的日志</li></ul><blockquote><p>涉及到的参数也有很多，后续再探讨—2024&#x2F;11&#x2F;17</p></blockquote><p>查看容器内的进程信息 docker top</p><p>查看容器的元数据信息 docker inspect</p><p>以交互的形式进入当前正在运行的容器(会开启一个新的交互终端)docker exec -it 容器id&#x2F;容器名称 需要执行的命令</p><p>比如进入mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mysql-container mysql -u root -p<br></code></pre></td></tr></table></figure><p>进入容器正在运行的终端docker attach 容器id&#x2F;容器名称</p><p>容器与本机文件直接的拷贝docker cp </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">cp</span> /path/on/host my_container:/path/in/container <span class="hljs-comment">#将本机文件/path/on/host拷贝到容器my_container的/path/in/container路径下</span><br>docker <span class="hljs-built_in">cp</span> my_container:/path/in/container /path/on/host <span class="hljs-comment">#反过来就是把容器内的文件拷贝到本机</span><br><span class="hljs-comment">#不需要容器正在运行也可以进行拷贝，容器的路径格式为container-name:/path</span><br></code></pre></td></tr></table></figure><ul><li>练习：利用docker部署tomcat</li></ul><p>首先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull tomcat<br></code></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name test-tomcat -p 8080:8080 tomcat <span class="hljs-comment">#表示后台运行一个容器名称为‘test-tomcat’的tomcat镜像，并且将本机的8080端口映射到容器的8080端口</span><br></code></pre></td></tr></table></figure><p>外部浏览器访问：虚拟机ip:8080 192.168.154.128:8080结果发现是404</p><p>进入容器内部查看原因</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it test-tomcat /bin/bash<br></code></pre></td></tr></table></figure><p>利用ls命令查看文件内容可以看见熟习的tomcat文件结构</p><blockquote><p>bin           conf             lib      logs            NOTICE     RELEASE-NOTES  temp     webapps.dist<br>BUILDING.txt  CONTRIBUTING.md  LICENSE  native-jni-lib  README.md  RUNNING.txt    webapps  work</p></blockquote><p>发现webapps中是空的，原因是docker的tomcat镜像和原版相比有一些差异或者是精简</p><p>但是webapps.dist中是有的</p><blockquote><p>docs  examples  host-manager  manager  ROOT</p></blockquote><p>利用命令将webapps.dist目录下的文件及其子目录下的文件都复制过去用cp 参数-r来实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r ./wabapps.dist/* ./wabapps<br></code></pre></td></tr></table></figure><p>再次访问192.168.154.128:8080就成功了</p><ul><li>练习，利用docker部署elasticsearch，并限制内存</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d --name elasticsearch \<br>  -p 9200:9200 -p 9300:9300 \<br>  -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>  -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms128m -Xmx512m&quot;</span> \<br>  elasticsearch:7.6.2<br></code></pre></td></tr></table></figure><p>注意：elasticsearch貌似没有latest的tag所以pull的时候要指定版本</p><p>访问： curl localhost:9200</p><blockquote><p>{<br>“name” : “e66c5bc98b22”,<br>“cluster_name” : “docker-cluster”,<br>“cluster_uuid” : “8R4Q4fB_QjCMws3aJw6e6Q”,<br>“version” : {<br> “number” : “7.6.2”,<br> “build_flavor” : “default”,<br> “build_type” : “docker”,<br> “build_hash” : “ef48eb35cf30adf4db14086e8aabd07ef6fb113f”,<br> “build_date” : “2020-03-26T06:34:37.794943Z”,<br> “build_snapshot” : false,<br> “lucene_version” : “8.4.0”,<br> “minimum_wire_compatibility_version” : “6.8.0”,<br> “minimum_index_compatibility_version” : “6.0.0-beta1”<br>},<br>“tagline” : “You Know, for Search”<br>}</p></blockquote><p>部署成功</p><ul><li><p>安装图形化界面portainer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 8088:9000 \<br>--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="hljs-literal">true</span> portainer/portainer<br></code></pre></td></tr></table></figure><p>开放在8088端口</p></li><li><p>docker镜像对比操作系统镜像为什么这么小？</p><blockquote><p>操作系统镜像，比如linux镜像一般由内核(Kernel)还有Rootfs(root file system)所组成，而docker镜像与宿主机共享内核，镜像中只会包含rootfs，并且针对不同镜像也可以对rootfs进行适当的精简，所以docker镜像可以很小。</p><p>并且docker镜像采用分层结构，在pull的时候docker会分层下载镜像文件，如果发现有些层已经在本地下载过，那就可以直接复用，无需二次下载。</p></blockquote></li><li><p>数据挂载 -v</p><p>可以通过数据挂载，将容器中的文件挂载到容器外，这样即使容器被删了数据也不会消失</p><p>-v 本机路径:容器内路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -v /home/test:/home centos <span class="hljs-comment">#将centos容器中的/home目录中的文件挂载到本机/home/test目录下</span><br></code></pre></td></tr></table></figure></li><li><p>练习：部署mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 3306:3306 \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>-v /home/mysql/conf:/etc/mysql/conf.d \<br>-v /home/mysql/data:/var/lib/mysql mysql <span class="hljs-comment">#分别将mysql配置和数据挂载到本地通过-e配置环境设置root密码</span><br></code></pre></td></tr></table></figure><p>具名挂载和匿名挂载</p><p>在挂载数据卷的时候可以为数据卷指定名字后续可以在docker volume ls中看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-v /容器内路径 <span class="hljs-comment">#匿名挂载</span><br>-v 卷名:/容器内路径 <span class="hljs-comment">#具名挂载</span><br>-v /宿主机路径://容器内路径 <span class="hljs-comment">#具体路径挂载</span><br></code></pre></td></tr></table></figure><p>也可以通过docker volume inspect &lt;卷名&gt;来查看卷的具体信息</p><p>共享容器的数据卷</p><p>–volumes-from 容器名</p></li><li><p>docker部署Reids</p><p>先创建本地的数据目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /data/redis<br></code></pre></td></tr></table></figure><p>部署命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>--restart=always \<br>-d \<br>--name redis-container \<br>-p 6379:6379 \<br>-v /data/redis:/data \<br>redis:latest \<br>redis-server --appendonly <span class="hljs-built_in">yes</span> \<br>--requirepass <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run \<br>--restart=always \ <span class="hljs-comment">#开机启动</span><br>-d \ <span class="hljs-comment">#后台运行</span><br>--name redis-container \ <span class="hljs-comment">#命名容器为redis-container</span><br>-p 6379:6379 \ <span class="hljs-comment">#端口映射</span><br>-v /data/redis:/data \ <span class="hljs-comment">#将数据挂载到本地</span><br>redis:latest \ <span class="hljs-comment">#指定版本</span><br>redis-server --appendonly <span class="hljs-built_in">yes</span> \ <span class="hljs-comment">#开启AOF持久化</span><br>--requirepass <span class="hljs-string">&quot;123456&quot;</span> <span class="hljs-comment">#设置密码</span><br></code></pre></td></tr></table></figure><p>进入容器内通过客户端连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis-container redis-cli<br>auth 123456<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/04/hello-world/"/>
    <url>/2024/12/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
